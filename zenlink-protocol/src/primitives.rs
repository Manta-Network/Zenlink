// Copyright 2020-2021 Zenlink
// Licensed under GPL-3.0.

use codec::{Decode, Encode};
#[cfg(feature = "std")]
use serde::{Deserialize, Serialize};
use sp_runtime::{DispatchResult, RuntimeDebug};

/// The balance of zenlink asset
pub type TokenBalance = u128;

/// The pair id of the zenlink dex.
pub type PairId = u32;

// The index represent native currency module index in runtime.
// We can only modify this value during the first deployment.
pub const NATIVE_CURRENCY_MODULE_INDEX: u8 = 2;

/// AssetId use to locate assets in framed base chain.
#[derive(Encode, Decode, Eq, PartialEq, Copy, Clone, RuntimeDebug, PartialOrd, Ord)]
#[cfg_attr(feature = "std", derive(Serialize, Deserialize, Default))]
pub struct AssetId {
    pub chain_id: u32,
    pub module_index: u8,
    pub asset_index: u32,
}

/// Zenlink module has tow kinds of assets
/// Foreign: The assets are generated by the other module
/// Lp: The assets are generated by pair.
#[derive(Encode, Decode, Eq, PartialEq, Copy, Clone, RuntimeDebug, PartialOrd, Ord)]
#[cfg_attr(feature = "std", derive(Serialize, Deserialize))]
pub enum AssetProperty {
    Foreign,
    Lp(LpProperty),
}

impl Default for AssetProperty {
    fn default() -> Self {
        AssetProperty::Foreign
    }
}

/// AssetProperty include the metadata of one asset.
#[derive(Encode, Decode, Eq, PartialEq, Clone, Copy, RuntimeDebug, PartialOrd, Ord)]
#[cfg_attr(feature = "std", derive(Serialize, Deserialize, Default))]
pub struct LpProperty {
    pub token_0: AssetId,
    pub token_1: AssetId,
}

pub trait MultiAsset<AccountId, TokenBalance> {
    fn multi_asset_total_supply(asset_id: &AssetId) -> TokenBalance;

    fn multi_asset_balance_of(asset_id: &AssetId, who: &AccountId) -> TokenBalance;

    fn multi_asset_transfer(
        asset_id: &AssetId,
        from: &AccountId,
        to: &AccountId,
        amount: TokenBalance,
    ) -> DispatchResult;

    fn multi_asset_withdraw(
        asset_id: &AssetId,
        who: &AccountId,
        amount: TokenBalance,
    ) -> DispatchResult;

    fn multi_asset_deposit(
        asset_id: &AssetId,
        who: &AccountId,
        amount: TokenBalance,
    ) -> DispatchResult;
}

pub trait OperationalAsset<AssetId, AccountId, TokenBalance> {
    fn module_index() -> u8;
    /// Get the asset `id` balance of `who`.
    fn balance(id: AssetId, who: AccountId) -> TokenBalance;

    /// Get the total supply of an asset `id`.
    fn total_supply(id: AssetId) -> TokenBalance;

    fn inner_transfer(
        id: AssetId,
        origin: AccountId,
        target: AccountId,
        amount: TokenBalance,
    ) -> DispatchResult;

    fn inner_deposit(id: AssetId, origin: AccountId, amount: TokenBalance) -> DispatchResult;

    fn inner_withdraw(id: AssetId, origin: AccountId, amount: TokenBalance) -> DispatchResult;
}
