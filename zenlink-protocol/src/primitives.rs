// Copyright 2020-2021 Zenlink
// Licensed under GPL-3.0.

use codec::{Decode, Encode};
#[cfg(feature = "std")]
use serde::{Deserialize, Serialize};
use sp_runtime::RuntimeDebug;

pub const NATIVE_CURRENCY: u8 = 0u8;
pub const INNER_ASSET: u8 = 1u8;
pub const OTHER_ASSET: u8 = 2u8;

/// The balance of zenlink asset
pub type TokenBalance = u128;

/// The pair id of the zenlink dex.
pub type PairId = u32;

// TODO: refactor AssetId
/// AssetId use to locate assets in framed base chain.
#[derive(Encode, Decode, Eq, PartialEq, Copy, Clone, RuntimeDebug, PartialOrd, Ord)]
#[cfg_attr(feature = "std", derive(Serialize, Deserialize, Default))]
pub struct AssetId {
    pub chain_id: u32,
    pub module_index: u8,
    pub asset_index: u32,
}

impl AssetId {
    pub fn is_valid(&self) -> bool {
        match self.module_index {
            NATIVE_CURRENCY => matches!(self.asset_index, 0u32),
            INNER_ASSET => true,
            OTHER_ASSET => true,
            _ => false,
        }
    }
}

/// Zenlink module has tow kinds of assets
/// Foreign: The assets are generated by the other module
/// Lp: The assets are generated by pair.
#[derive(Encode, Decode, Eq, PartialEq, Copy, Clone, RuntimeDebug, PartialOrd, Ord)]
#[cfg_attr(feature = "std", derive(Serialize, Deserialize))]
pub enum AssetProperty {
    Foreign,
    Lp(LpProperty),
}

impl Default for AssetProperty {
    fn default() -> Self {
        AssetProperty::Foreign
    }
}

/// AssetProperty include the metadata of one asset.
#[derive(Encode, Decode, Eq, PartialEq, Clone, Copy, RuntimeDebug, PartialOrd, Ord)]
#[cfg_attr(feature = "std", derive(Serialize, Deserialize, Default))]
pub struct LpProperty {
    pub token_0: AssetId,
    pub token_1: AssetId,
}
