// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for zenlink_vault
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `shirui`, CPU: `Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../target/release/zenlink-template-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// zenlink_vault
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./all-weight_2.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for zenlink_vault.
pub trait WeightInfo {
	fn create_vault_asset() -> Weight;
	fn deposit() -> Weight;
	fn mint() -> Weight;
	fn withdraw() -> Weight;
	fn redeem() -> Weight;
}

/// Weights for zenlink_vault using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ZenlinkVault Vaults (r:1 w:1)
	// Storage: ZenlinkVault AssetMetadata (r:2 w:2)
	// Storage: ZenlinkVault VaultRatio (r:1 w:1)
	fn create_vault_asset() -> Weight {
		(18_206_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: ZenlinkVault Vaults (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: ZenlinkVault AssetMetadata (r:2 w:0)
	// Storage: System Account (r:1 w:1)
	fn deposit() -> Weight {
		(99_159_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: ZenlinkVault Vaults (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: ZenlinkVault AssetMetadata (r:2 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: System Account (r:1 w:1)
	fn mint() -> Weight {
		(92_309_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: ZenlinkVault Vaults (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: Tokens TotalIssuance (r:2 w:1)
	// Storage: ZenlinkVault AssetLockedAccounts (r:1 w:0)
	// Storage: ZenlinkVault VaultRatio (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn withdraw() -> Weight {
		(95_240_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: ZenlinkVault Vaults (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: Tokens TotalIssuance (r:2 w:1)
	// Storage: ZenlinkVault AssetLockedAccounts (r:1 w:0)
	// Storage: ZenlinkVault VaultRatio (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn redeem() -> Weight {
		(79_124_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ZenlinkVault Vaults (r:1 w:1)
	// Storage: ZenlinkVault AssetMetadata (r:2 w:2)
	// Storage: ZenlinkVault VaultRatio (r:1 w:1)
	fn create_vault_asset() -> Weight {
		(18_206_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: ZenlinkVault Vaults (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: ZenlinkVault AssetMetadata (r:2 w:0)
	// Storage: System Account (r:1 w:1)
	fn deposit() -> Weight {
		(99_159_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: ZenlinkVault Vaults (r:1 w:0)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: ZenlinkVault AssetMetadata (r:2 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: System Account (r:1 w:1)
	fn mint() -> Weight {
		(92_309_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: ZenlinkVault Vaults (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: Tokens TotalIssuance (r:2 w:1)
	// Storage: ZenlinkVault AssetLockedAccounts (r:1 w:0)
	// Storage: ZenlinkVault VaultRatio (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn withdraw() -> Weight {
		(95_240_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: ZenlinkVault Vaults (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: Tokens TotalIssuance (r:2 w:1)
	// Storage: ZenlinkVault AssetLockedAccounts (r:1 w:0)
	// Storage: ZenlinkVault VaultRatio (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn redeem() -> Weight {
		(79_124_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
}
